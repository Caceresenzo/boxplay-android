package caceresenzo.apps.boxplay.helper;

import android.app.Application;
import android.content.Context;
import android.content.res.Resources;
import android.os.Build;
import android.support.annotation.ColorRes;
import caceresenzo.apps.boxplay.application.BoxPlayApplication;

public abstract class AbstractHelper {
	
	/* Managers */
	protected BoxPlayApplication boxPlayApplication;
	protected HelperManager helperManager;
	
	/* Constructor */
	public AbstractHelper(BoxPlayApplication boxPlayApplication) {
		this.boxPlayApplication = boxPlayApplication;
	}
	
	public void initialize(HelperManager helperManager) {
		this.helperManager = helperManager;
	}
	
	/** @see Application#getString(int) */
	public final String getString(int resId) {
		return boxPlayApplication.getString(resId);
	}
	
	/** @see Application#getString(int, Object...) */
	public final String getString(int resId, Object... formatArgs) {
		return boxPlayApplication.getString(resId, formatArgs);
	}
	
	/**
	 * Alaways return a color corresponding from the <code>colorRessourceId</code> you provide using a not deprecated function.
	 * 
	 * @param colorRessourceId
	 *            The desired resource identifier, as generated by the aapttool. This integer encodes the package, type, and resourceentry. The value 0 is an invalid identifier.
	 * @return A single color value in the form 0xAARRGGBB.
	 * @see Resources#getColor(int) Before API 22 function.
	 * @see Context#getColor(int) After API 22 function.
	 */
	@SuppressWarnings("deprecation")
	public static int color(@ColorRes int colorRessourceId) {
		if (Build.VERSION.SDK_INT < 23) {
			return BoxPlayApplication.getBoxPlayApplication().getResources().getColor(colorRessourceId);
		} else {
			return BoxPlayApplication.getBoxPlayApplication().getColor(colorRessourceId);
		}
	}
	
}